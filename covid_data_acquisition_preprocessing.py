# -*- coding: utf-8 -*-
"""Covid_Data_Acquisition_Preprocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WITtR8F_BUWoJwh7i9Ox6g3puUJncONi

**Covid Data - Data Acquisition, Preprocessing and Loading to Database**



*   Extracting covid data using Web scraping
*   Extracting the features and preprocessing the covid Data
*   Creating the COVID_DATA table in sqlite database
*   Loading the covid data into the database
*   Querying the database and getting back the covid data
"""

import requests
from bs4 import BeautifulSoup
import pandas as pd

"""**Extracting covid data using Web scraping**"""

covid_url = 'https://www.worldometers.info/coronavirus/'
page = requests.get(covid_url)
soup = BeautifulSoup(page.content, "html.parser")
results = soup.find(id="main_table_countries_today")

"""**Extracting the features and preprocessing the covid Data**"""

header_elements = results.find("thead");
header_row = results.find("tr");
header_cols = results.find_all("th");
col_names = []
key_names = []
for header_col in header_cols:
    col_value = header_col.get_text()
    col_value = col_value.strip().replace("\n", "").replace("\xa0", "")
    col_names.append(col_value)
    key_name = col_value.replace("/","_per_").replace(" ", "_").replace(",Other", "").replace(",Critical", "").replace("#","S.No")
    key_names.append(key_name)
col_names = col_names[0:15]
key_names = key_names[0:15]
body_elements = results.find_all("tbody");
body_rows = body_elements[0].find_all("tr");
body_rows = body_rows[8:]
countries_covid_data_str = []
countries_covid_data = []
for body_row in body_rows:
    covid_data_tds = body_row.find_all("td")
    covid_data_tds = covid_data_tds[0:15]
    #print(body_row)
    covid_data_row_str = {}
    covid_data_row = {}
    for i in range(len(covid_data_tds)):
        covid_data_td = covid_data_tds[i]
        key_name = key_names[i]
        data_col_str = covid_data_td.get_text().strip().replace("\n", "").replace("\xa0", "")
        covid_data_row_str[key_name] = data_col_str
        data_col = data_col_str
        data_col = data_col.replace("+","").replace(",","")
        covid_data_row[key_name] = data_col
    countries_covid_data_str.append(covid_data_row)
    countries_covid_data.append(covid_data_row)

covid_data = pd.DataFrame(countries_covid_data_str, columns=key_names)

covid_data.head(60)

"""
**Creating the COVID_DATA table in sqlite database**"""

import sqlite3
conn = sqlite3.connect('covid_data.db');
conn.execute('drop table IF EXISTS COVID_DATA');
conn.execute('''
CREATE TABLE COVID_DATA (
  country_name varchar,
  total_cases long,
  new_cases long,
  total_deaths long,
  new_deaths int,
  total_recovered long,
  new_recovered long,
  active_cases long,
  serious long,
  total_cases_per_million long,
  deaths_per_million long,
  total_tests long,
  tests_per_million long,
  population long
 );''')

conn.commit()

"""**Loading the covid data into the database**"""

for i in range(len(countries_covid_data)):
    country_covid_data = countries_covid_data[i]
    country_name_v = country_covid_data['Country'];
    total_cases = country_covid_data['TotalCases'];
    new_cases = country_covid_data['NewCases'];
    total_deaths = country_covid_data['TotalDeaths'];
    new_deaths = country_covid_data['NewDeaths'];
    total_recovered = country_covid_data['TotalRecovered'];
    new_recovered = country_covid_data['NewRecovered'];
    active_cases = country_covid_data['ActiveCases'];
    serious = country_covid_data['Serious'];
    total_cases_per_million = country_covid_data['TotCases_per_1M_pop'];
    deaths_per_million = country_covid_data['Deaths_per_1M_pop'];
    total_tests = country_covid_data['TotalTests'];
    tests_per_million = country_covid_data['Tests_per_1M_pop'];
    population = country_covid_data['Population'];

    conn.execute(''' INSERT INTO Covid_Data(country_name, total_cases, new_cases, total_deaths, new_deaths, total_recovered,
    new_recovered, active_cases, serious, total_cases_per_million, deaths_per_million,  total_tests, tests_per_million, population)
    VALUES(?,?,?,? ,?,? ,?,? ,? ,? ,? ,? ,?, ?); ''', (country_name_v, total_cases, new_cases, total_deaths, new_deaths,
                                                      total_recovered, new_recovered, active_cases, serious, total_cases_per_million,
                                                      deaths_per_million, total_tests, tests_per_million, population));

conn.commit()

"""**Querying the database and getting back the covid data**"""

covid_data_countries = conn.execute('select * from COVID_DATA')
for row in covid_data_countries:
  print(row)